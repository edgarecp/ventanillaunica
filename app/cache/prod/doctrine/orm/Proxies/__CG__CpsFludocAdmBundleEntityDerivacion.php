<?php

namespace Proxies\__CG__\Cps\Fludoc\AdmBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Derivacion extends \Cps\Fludoc\AdmBundle\Entity\Derivacion implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setFecha($fecha)
    {
        $this->__load();
        return parent::setFecha($fecha);
    }

    public function getFecha()
    {
        $this->__load();
        return parent::getFecha();
    }

    public function setObservacion($observacion)
    {
        $this->__load();
        return parent::setObservacion($observacion);
    }

    public function getObservacion()
    {
        $this->__load();
        return parent::getObservacion();
    }

    public function setRecepcionEl($recepcionEl)
    {
        $this->__load();
        return parent::setRecepcionEl($recepcionEl);
    }

    public function getRecepcionEl()
    {
        $this->__load();
        return parent::getRecepcionEl();
    }

    public function setServicio(\General\EmpresaBundle\Entity\Servicio $servicio = NULL)
    {
        $this->__load();
        return parent::setServicio($servicio);
    }

    public function getServicio()
    {
        $this->__load();
        return parent::getServicio();
    }

    public function setDocrec(\Cps\Fludoc\AdmBundle\Entity\Docrec $docrec = NULL)
    {
        $this->__load();
        return parent::setDocrec($docrec);
    }

    public function getDocrec()
    {
        $this->__load();
        return parent::getDocrec();
    }

    public function setEstado(\General\ComunBundle\Entity\Estado $estado = NULL)
    {
        $this->__load();
        return parent::setEstado($estado);
    }

    public function getEstado()
    {
        $this->__load();
        return parent::getEstado();
    }

    public function addInforme(\Cps\Fludoc\ServicioBundle\Entity\Informe $informes)
    {
        $this->__load();
        return parent::addInforme($informes);
    }

    public function removeInforme(\Cps\Fludoc\ServicioBundle\Entity\Informe $informes)
    {
        $this->__load();
        return parent::removeInforme($informes);
    }

    public function getInformes()
    {
        $this->__load();
        return parent::getInformes();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'fecha', 'observacion', 'recepcionEl', 'servicio', 'docrec', 'estado', 'informes');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}